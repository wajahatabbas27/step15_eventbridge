{
  "Resources": {
    "producerFunctionServiceRole84932989": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/producerFunction/ServiceRole/Resource"
      }
    },
    "producerFunctionServiceRoleDefaultPolicyFCC7F9D8": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "producerFunctionServiceRoleDefaultPolicyFCC7F9D8",
        "Roles": [
          {
            "Ref": "producerFunctionServiceRole84932989"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/producerFunction/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "producerFunctionBD6C37FD": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "7a66d9f256d2ab3153cbaa453df470579857f38ec386ef4199aae250dc1b2e24.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "producerFunctionServiceRole84932989",
            "Arn"
          ]
        },
        "FunctionName": "ProducerEventFunction",
        "Handler": "producer.handler",
        "Runtime": "nodejs12.x"
      },
      "DependsOn": [
        "producerFunctionServiceRoleDefaultPolicyFCC7F9D8",
        "producerFunctionServiceRole84932989"
      ],
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/producerFunction/Resource",
        "aws:asset:path": "asset.7a66d9f256d2ab3153cbaa453df470579857f38ec386ef4199aae250dc1b2e24",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "testApiforClientAF8F0B5D": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "testApiforClient"
      },
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/testApiforClient/Resource"
      }
    },
    "testApiforClientCloudWatchRole4CB3E3F0": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/testApiforClient/CloudWatchRole/Resource"
      }
    },
    "testApiforClientAccount2E84123F": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "testApiforClientCloudWatchRole4CB3E3F0",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "testApiforClientAF8F0B5D"
      ],
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/testApiforClient/Account"
      }
    },
    "testApiforClientDeployment1D8245C0a0cc27f0c7f38bfa31b6e8f18da629eb": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "testApiforClientAF8F0B5D"
        },
        "Description": "Automatically created by the RestApi construct"
      },
      "DependsOn": [
        "testApiforClientproxyANY17FB0F9C",
        "testApiforClientproxyF674AC0C",
        "testApiforClientANYD8F72B4F"
      ],
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/testApiforClient/Deployment/Resource"
      }
    },
    "testApiforClientDeploymentStageprod0D866AF5": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "RestApiId": {
          "Ref": "testApiforClientAF8F0B5D"
        },
        "DeploymentId": {
          "Ref": "testApiforClientDeployment1D8245C0a0cc27f0c7f38bfa31b6e8f18da629eb"
        },
        "StageName": "prod"
      },
      "DependsOn": [
        "testApiforClientAccount2E84123F"
      ],
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/testApiforClient/DeploymentStage.prod/Resource"
      }
    },
    "testApiforClientproxyF674AC0C": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "testApiforClientAF8F0B5D",
            "RootResourceId"
          ]
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "testApiforClientAF8F0B5D"
        }
      },
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/testApiforClient/Default/{proxy+}/Resource"
      }
    },
    "testApiforClientproxyANYApiPermissionEventbridgeWithLambdaStacktestApiforClient489B039BANYproxyD35226DA": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "producerFunctionBD6C37FD",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "testApiforClientAF8F0B5D"
              },
              "/",
              {
                "Ref": "testApiforClientDeploymentStageprod0D866AF5"
              },
              "/*/*"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/testApiforClient/Default/{proxy+}/ANY/ApiPermission.EventbridgeWithLambdaStacktestApiforClient489B039B.ANY..{proxy+}"
      }
    },
    "testApiforClientproxyANYApiPermissionTestEventbridgeWithLambdaStacktestApiforClient489B039BANYproxy1E59003A": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "producerFunctionBD6C37FD",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "testApiforClientAF8F0B5D"
              },
              "/test-invoke-stage/*/*"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/testApiforClient/Default/{proxy+}/ANY/ApiPermission.Test.EventbridgeWithLambdaStacktestApiforClient489B039B.ANY..{proxy+}"
      }
    },
    "testApiforClientproxyANY17FB0F9C": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "ResourceId": {
          "Ref": "testApiforClientproxyF674AC0C"
        },
        "RestApiId": {
          "Ref": "testApiforClientAF8F0B5D"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "producerFunctionBD6C37FD",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/testApiforClient/Default/{proxy+}/ANY/Resource"
      }
    },
    "testApiforClientANYApiPermissionEventbridgeWithLambdaStacktestApiforClient489B039BANY3A85604B": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "producerFunctionBD6C37FD",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "testApiforClientAF8F0B5D"
              },
              "/",
              {
                "Ref": "testApiforClientDeploymentStageprod0D866AF5"
              },
              "/*/"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/testApiforClient/Default/ANY/ApiPermission.EventbridgeWithLambdaStacktestApiforClient489B039B.ANY.."
      }
    },
    "testApiforClientANYApiPermissionTestEventbridgeWithLambdaStacktestApiforClient489B039BANYC1B8819E": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "producerFunctionBD6C37FD",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "testApiforClientAF8F0B5D"
              },
              "/test-invoke-stage/*/"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/testApiforClient/Default/ANY/ApiPermission.Test.EventbridgeWithLambdaStacktestApiforClient489B039B.ANY.."
      }
    },
    "testApiforClientANYD8F72B4F": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "ResourceId": {
          "Fn::GetAtt": [
            "testApiforClientAF8F0B5D",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "testApiforClientAF8F0B5D"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "producerFunctionBD6C37FD",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/testApiforClient/Default/ANY/Resource"
      }
    },
    "consumerFunctionServiceRoleFAB2A3FF": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/consumerFunction/ServiceRole/Resource"
      }
    },
    "consumerFunctionF99F4064": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "7a66d9f256d2ab3153cbaa453df470579857f38ec386ef4199aae250dc1b2e24.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "consumerFunctionServiceRoleFAB2A3FF",
            "Arn"
          ]
        },
        "FunctionName": "ConsumerFunction",
        "Handler": "consumer.handler",
        "Runtime": "nodejs12.x"
      },
      "DependsOn": [
        "consumerFunctionServiceRoleFAB2A3FF"
      ],
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/consumerFunction/Resource",
        "aws:asset:path": "asset.7a66d9f256d2ab3153cbaa453df470579857f38ec386ef4199aae250dc1b2e24",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "RulesToMatch72F5ACD4": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Filter events that come from country PK and invoke lambda with it.",
        "EventPattern": {
          "source": [
            "custom.api"
          ],
          "detail": {
            "country": [
              "PK"
            ]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "consumerFunctionF99F4064",
                "Arn"
              ]
            },
            "Id": "Target0"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/RulesToMatch/Resource"
      }
    },
    "RulesToMatchAllowEventRuleEventbridgeWithLambdaStackconsumerFunction844433232DFF063C": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "consumerFunctionF99F4064",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "RulesToMatch72F5ACD4",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/RulesToMatch/AllowEventRuleEventbridgeWithLambdaStackconsumerFunction84443323"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAA/1WQ0U7DMAxFv4X31FCGeO+G9gSiKh8wZakpXtOkqpONquq/46ZDjKd7fJNc23mE/Ake7vSFM1O3maUjTB9Bm1aJdZis7o61hmkfnQnkndp9ulsuceiIWapZke5gqrzF5SBp6S2ZMd1LNCveHDQzBoZiEalhG02LYasZle6p0QEveoTpNXWukEPRU0r8w8IYH11QL9hbP3YoKO5NJRs0aYwV5KmPg8HUpBz89/jrXINXfsPw5evFWmlWeJY0lq3idSvReVZp9iWaXLPY7zH0MfzLEt55V1NIX+N8jXDi+3P+DPlG/vvERNkgO1CHUK36A9RFYiyLAQAA"
      },
      "Metadata": {
        "aws:cdk:path": "EventbridgeWithLambdaStack/CDKMetadata/Default"
      },
      "Condition": "CDKMetadataAvailable"
    }
  },
  "Outputs": {
    "testApiforClientEndpoint840EFB1C": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "testApiforClientAF8F0B5D"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/",
            {
              "Ref": "testApiforClientDeploymentStageprod0D866AF5"
            },
            "/"
          ]
        ]
      }
    }
  },
  "Conditions": {
    "CDKMetadataAvailable": {
      "Fn::Or": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "af-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ca-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-northwest-1"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "me-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "sa-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-2"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-2"
              ]
            }
          ]
        }
      ]
    }
  },
  "Parameters": {
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  }
}